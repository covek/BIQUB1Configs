[include moonraker_obico_macros.cfg]
# JoeTodes config for stock BIQU-B1 connected over UART to a Pi Zero 2 W
#
# To use this config, the firmware should be compiled for the
# LPC1768 or LPC1769(Turbo).

# [include mainsail.cfg]
[include timelapse.cfg]
[include spoolman.cfg]

[stepper_x]
step_pin: P2.2
# dir_pin was flipped in default SKR 1.4 example
dir_pin: !P2.6
enable_pin: !P2.1
microsteps: 128
rotation_distance: 40
endstop_pin: !P1.29
# Negative x-min ensures x=0 is actually on the bed
position_endstop: 0
position_min: 0
position_max: 235
homing_speed: 50

[stepper_y]
step_pin: P0.19
dir_pin: P0.20
enable_pin: !P2.8
microsteps: 128
rotation_distance: 40
endstop_pin: !P1.28
position_endstop: 0
position_max: 235
homing_speed: 50

[stepper_z]
step_pin: P0.22
dir_pin: P2.11
enable_pin: !P0.21
microsteps: 128
rotation_distance: 8
#endstop_pin: !P1.27
endstop_pin: probe:z_virtual_endstop
#position_endstop: 0.0
position_min: -2
position_max: 250

[safe_z_home]
home_xy_position: 79.5, 149.5 # Change coordinates to the center of your print bed
speed: 50
z_hop: 10                 # Move up 10mm
z_hop_speed: 5

[extruder]
step_pin: P2.13
dir_pin: !P0.11
enable_pin: !P2.12
# If microsteps is changed, may need to re-tune rotation_distance and pressure_advance
microsteps: 16
rotation_distance: 32.682276
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: P2.7
sensor_type: EPCOS 100K B57560G104F
sensor_pin: P0.24
control: pid
# Results of PID_CALIBRATE HEATER=extruder TARGET=200
pid_kp = 25.691
pid_ki = 1.223
pid_kd = 134.878
min_temp: 0
max_temp: 260
# Follow tuning guide in Klipper docs
#pressure_advance: 0.3476


[heater_bed]
heater_pin: P2.5
sensor_type: EPCOS 100K B57560G104F
sensor_pin: P0.25
control = pid
# Results of PID_CALIBRATE HEATER=heater_bed TARGET=55:
pid_kp = 70.876
pid_ki = 1.150
pid_kd = 1092.377
min_temp: 0
max_temp: 130

[fan]
pin: P2.3

[mcu]
# Connecting to rPi 4B 2GB
#serial: /dev/serial/by-id/usb-Klipper_lpc1768_11B0000C47104AAF85E6645DC42000F5-if00
serial: /dev/ttyACM1
restart_method: command

[printer]
kinematics: cartesian
max_velocity: 400
max_accel: 3500
max_z_velocity: 10
max_z_accel: 100

# Connect filament sensor to E0DET instead of touchscreen
[filament_switch_sensor filament_runout]
switch_pin: !P1.26 
pause_on_runout: True

# Can control with SET_LED LED=hotend RED=x.x GREEN=x.x BLUE=x.x
[neopixel hotend]
pin: P1.24
chain_count: 2
color_order: GRB
# Set to on-brand BIQU-B1 hot pink
initial_RED: 1.0
initial_GREEN: 0.1
initial_BLUE: 0.8

# Results of manual resonance measuring
[input_shaper]
#shaper_freq_x: 38.76
#shaper_freq_y: 57.69
#shaper_type: mzv

[bltouch]
sensor_pin: P0.10 #Probe
control_pin: P2.0 #SERVOS
samples: 3
samples_result: average
samples_tolerance_retries: 3
samples_tolerance: 0.5
x_offset: 0 # 28
y_offset: -42
#z_offset: 2.49

[bed_mesh]
speed: 200
horizontal_move_z: 10
mesh_min: 0,35
mesh_max: 165,165
probe_count: 3, 3
fade_start: 1.0
fade_end = 10.0
fade_target: 0
#mesh_pps: 2,2
algorithm = bicubic

########################################
# TMC2208 configuration
# From TMC docs, max current=2A, so max RMS current~=1.4A
# Settled at 1.2A for some headroom
# Per Klipper docs, prefer not to set hold_current
# stealthchop only enabled on Z to due better accuracy of spreadcycle
########################################

[tmc2208 stepper_x]
uart_pin: P1.10
run_current: 1.200
#hold_current: 0.720
#stealthchop_threshold: 999999

[tmc2208 stepper_y]
uart_pin: P1.9
run_current: 1.200
#hold_current: 0.720
#stealthchop_threshold: 999999

[tmc2208 stepper_z]
uart_pin: P1.8
run_current: 1.200
#hold_current: 0.720
stealthchop_threshold: 999999

[tmc2208 extruder]
uart_pin: P1.4
run_current: 1.200
#hold_current: 0.720
#stealthchop_threshold: 999999



########################################
# EXP1 / EXP2 (display) pins
# Unused currently, TODO setting up touch screen
########################################

#[board_pins]
#aliases:
    # EXP1 header
    #EXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,
    #EXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,
    # EXP2 header
    #EXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,
    #EXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>
    # Pins EXP2_1, EXP2_6, EXP2_2 are also MISO, MOSI, SCK of bus "ssp0"

# See the sample-lcd.cfg file for definitions of common LCD displays.

#[display]
#lcd_type: st7920
#cs_pin: EXP1_7
#sclk_pin: EXP1_6
#sid_pin: EXP1_8
#encoder_pins: ^EXP1_5, ^EXP1_3
#click_pin: ^!EXP1_2

[board_pins]
aliases:
    EXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,
    EXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,
    EXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,
    EXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>

[display]
lcd_type: st7920
cs_pin: EXP1_4
sclk_pin: EXP1_5
sid_pin: EXP1_3
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2

#[bed_screws]
#screw1: 35, 35
#screw2: 35, 195
#screw3: 195, 35
#screw4: 195, 195

# Macroes
[display_status]

[exclude_object]

[gcode_shell_command backup_cfg]
command: ~/printer_data/config/autocommit.sh
timeout: 30
verbose: True

[gcode_macro BACKUP_CFG]
description: Backs up config directory GitHub
gcode:
    {% set summary = params.SUMMARY|default('Autocommit')|string %}
    RUN_SHELL_COMMAND CMD=backup_cfg PARAMS="{summary}"

[gcode_macro MOVE_UP5]
gcode:
  SAVE_GCODE_STATE NAME=my_move_up_state
  G91
  G1 Z50 F300
  RESTORE_GCODE_STATE NAME=my_move_up_state

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
#default_parameter_X: 5    #edit to your park position
#default_parameter_Y: 5    #edit to your park position
#default_parameter_Z: 10   #edit to your park position
#default_parameter_E: 5  #edit to your retract length
gcode:
   SAVE_GCODE_STATE NAME=PAUSE_state
   BASE_PAUSE
   G91
   G1 E-5 F2100
   G1 Z10
   G90
   G1 X5 Y5 F6000

[gcode_macro MOTOR_OFF]
gcode:
   M18

[gcode_macro RESUME]
rename_existing: BASE_RESUME
#default_parameter_E: 0.5      #edit to your retract length
gcode:
   G91
   G1 E5 F2100
   G90
   RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
   BASE_RESUME

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
   M107
   TURN_OFF_HEATERS
   CLEAR_PAUSE
   SDCARD_RESET_FILE
   BASE_CANCEL_PRINT
   G1 Z30
   G28 X
   G28 Y

[gcode_macro PRINT_START]
gcode:
   CLEAR_PAUSE
   PRINT MSG="Starting..."
    ### Start of the PRIME LINE ROUTINE ###########     
    G92 E0.0                #reset extruder distance position
    G1 X3 Y3 Z0.3 F3000     #move to prime line position
    G1 X40 E10.0 F1000      #intro line
    M117 Prime Line...
    G1 X100 E16.0 F500      # intro line
    G92 E0.0                #reset extruder distance position
    G90
    M117 Printing...


# send custom msg
# OUTPUT_TARGET 0 : Both LCD and terminal , 1 : Terminal only , 2 : LCD only
[gcode_macro PRINT]
variable_parameter_MSG : ''
variable_parameter_OUTPUT_TARGET : 0
gcode:
    BED_MESH_PROFILE LOAD=default
    {% if params.OUTPUT_TARGET|default(0)|int == 0 %}
        M117 {params.MSG | string}
        { action_respond_info((params.MSG) | string)}
    {% elif params.OUTPUT_TARGET|default(0)|int == 1 %}
        { action_respond_info((params.MSG) | string)}
    {% else %}
         M117 {params.MSG | string}
    {% endif %}

[gcode_macro G29]
gcode:
    BED_MESH_CALIBRATE

[gcode_macro PREHEAT]
gcode:
     SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
     SET_HEATER_TEMPERATURE HEATER=extruder TARGET=170

[pause_resume]

[gcode_macro M600]
gcode:
	PAUSE
	CHANGE_FILAMENT_START

[gcode_macro CHANGE_FILAMENT_START]
gcode:
	SAVE_GCODE_STATE NAME=M600_state
	G91
	G1 E-10 F2700
	G1 Z10
	G90
	G1 X50 Y0 F3000
	G91
	G1 E-5 F300

[gcode_macro CHANGE_FILAMENT_END]
gcode:
	G91
	RESTORE_GCODE_STATE NAME=M600_state
	RESUME

[delayed_gcode CLEAR_DISPLAY]
gcode:
  M117

[gcode_macro LOAD_FILAMENT]
gcode:
 G91
 G1 E50
 G90
 M400
 M117 Load Complete!
 UPDATE_DELAYED_GCODE ID=CLEAR_DISPLAY DURATION=10

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 2
; minimum probe count
variable_min_probe_count : 3
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
; enable preference index
variable_enable_reference_index : False
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
        {% else %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% endif %}

	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            {% set algorithm = "lagrange" %}
            {% if "algorithm" in bedMeshConfig and meshPointX >=4 and meshPointY >=4 %}
                {% set algorithm = bedMeshConfig.algorithm %}
            {% endif %}

            {% if enable_reference_index %}
                {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
            {% else %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
            {% endif %}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}

[respond]
default_type: echo

[virtual_sdcard]
path = /home/pi/printer_data/gcodes

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern
            # Diagonals
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            
            # Box
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
        
        # Small pattern
            # Small diagonals 
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            
            # Small box
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        G28
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bltouch]
#*# z_offset = 2.945
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  -0.094688, -0.155625, -0.112656
#*# 	  0.112969, 0.083594, 0.093906
#*# 	  0.195156, 0.151562, 0.286094
#*# tension = 0.2
#*# min_x = 78.74
#*# algo = lagrange
#*# y_count = 3
#*# mesh_y_pps = 2
#*# min_y = 75.45
#*# x_count = 3
#*# max_y = 158.23
#*# mesh_x_pps = 2
#*# max_x = 162.47
